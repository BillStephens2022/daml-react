module Setup where


import Common (Skillset(..))
import DA.Optional (fromSomeNote)
import qualified DA.Text as T
import Daml.Script
import User as UserModule
import UserWallet

-- | A record containing all the parties that we will use in our script
data Parties = Parties
  with
    alice : Party
    bob : Party
    charlie: Party
    debbie: Party
    ernie: Party
    fiona: Party
    public: Party

-- | A test user for the create-daml-app network.
-- When a participantName is provided, the testUser will be created/or fetched
-- on the given participant.
data TestUser = TestUser with
  alias : Text
  public : Party
  participantName: Optional ParticipantName

defaultParticipant : Optional ParticipantName
defaultParticipant = Prelude.None
-- | Create a public party, then create three test users.

setup : Script Parties
setup = do
  public <- createPublic defaultParticipant
  -- In the getting started guide, we only have one participant so we set the participant name to None.
  -- If you are running this against a ledger with multiple participants, specify the participant the parties
  -- should be hosted on.
  alice <- createTestUser $ TestUser "Alice" public defaultParticipant
  bob <- createTestUser $ TestUser "Bob" public defaultParticipant
  charlie <- createTestUser $ TestUser "Charlie" public defaultParticipant
  debbie <- createTestUser $ TestUser "Debbie" public defaultParticipant
  ernie <- createTestUser $ TestUser "Ernie" public defaultParticipant
  fiona <- createTestUser $ TestUser "Fiona" public defaultParticipant
  george <- createTestUser $ TestUser "George" public defaultParticipant

  -- Create User contracts for each party with their respective skillsets
  createUserContract alice Technology
  createUserContract bob Handyman
  createUserContract charlie Landscaping
  createUserContract debbie Babysitting
  createUserContract ernie Landscaping
  createUserContract fiona Financial
  createUserContract george Handyman

  -- Create UserWallet contracts for each party with initial balance of 0.00
  createUserWallet alice
  createUserWallet bob
  createUserWallet charlie
  createUserWallet debbie
  createUserWallet ernie
  createUserWallet fiona
  createUserWallet george

  -- Create Alias contracts for each party with their respective skillsets
  createAliasContract alice "Alice" Technology public
  createAliasContract bob "Bob" Handyman public
  createAliasContract charlie "Charlie" Landscaping public
  createAliasContract debbie "Debbie" Babysitting public
  createAliasContract ernie "Ernie" Landscaping public
  createAliasContract fiona "Fiona" Financial public
  createAliasContract george "George" Handyman public

  pure $ Parties with
    alice
    bob
    charlie
    debbie
    ernie
    fiona
    public

-- | Create a User contract for a party with a specific skillset.
createUserContract : Party -> Skillset -> Script (ContractId UserModule.User)
createUserContract party skillset = do
  cid <- submit party do
    createCmd UserModule.User with
      username = party
      skillset = skillset
  pure cid

-- | Create UserWallet contracts for each party with an initial balance of 0.00.
createUserWallet : Party -> Script (ContractId UserWallet)
createUserWallet party = do
  cid <- submit party do
    createCmd UserWallet with
      username = party
      walletBalance = 0.00
  pure cid

-- | Create Alias contracts for each party with their respective skillsets.
createAliasContract : Party -> Text -> Skillset -> Party -> Script ()
createAliasContract party alias skillset public = do
  _ <- submit party do
    createCmd UserModule.Alias with
      username = party
      alias = alias
      skillset = skillset
      public = public
  pure ()

-- | Create a test user.
createTestUser : TestUser -> Script Party
createTestUser TestUser{alias, public, participantName} = do
  u <- getOrCreateUser alias (Some public) participantName
  let p = getPrimaryParty u
  pure p

-- | Create the public party.
createPublic : Optional ParticipantName -> Script Party
createPublic participantName = do
  publicUser <- getOrCreateUser "Public" Prelude.None participantName
  pure $ getPrimaryParty publicUser


-- | Get a user by their id. If the user doesn't exist, it is created.
getOrCreateUser : Text -> Optional Party -> Optional ParticipantName -> Script Daml.Script.User
getOrCreateUser alias publicM participantNameM = do
  userId <- validateUserId $ toUserId alias
  try
    getUser_ userId participantNameM
  catch
    UserNotFound _ -> do
      p <- allocateParty_ alias participantNameM
      let u = Daml.Script.User userId (Some p)
      let rights  = CanActAs p :: [CanReadAs public | Some public <- [publicM]]
      createUser_ u rights participantNameM
      pure u

getUser_ : UserId -> Optional ParticipantName -> Script Daml.Script.User
getUser_  userId participantNameM = do
  case participantNameM of
    Some participantName -> getUserOn userId participantName
    Prelude.None -> getUser userId

allocateParty_ : Text -> Optional ParticipantName -> Script Party
allocateParty_ alias participantNameM = do
  case participantNameM of
    Some participantName -> allocatePartyOn alias participantName
    Prelude.None -> allocateParty alias

createUser_ : Daml.Script.User -> [UserRight] ->  Optional ParticipantName -> Script ()
createUser_ user rights participantNameM = do
  case participantNameM of
    Some participantName -> createUserOn user rights participantName
    Prelude.None -> createUser user rights

-- | Convert a text to a valid user id.
toUserId : Text -> Text
toUserId = T.asciiToLower

-- | Try to get the primary party of a user and fail if the user has no associated primary party.
getPrimaryParty : Daml.Script.User -> Party
getPrimaryParty u = fromSomeNote ("User " <> userIdToText u.userId <> " is missing a primary party.") u.primaryParty
