-- Work.daml
module Work where

import Common (Skillset)
import Payment
import UserWallet

type WorkProposalId = ContractId WorkProposal
type WorkContractId = ContractId WorkContract
data RateType = 
    FlatFee with 
        amount: Decimal 
    | HourlyRate with 
        rate: Decimal
        hours: Decimal
    deriving (Eq, Show)

template WorkProposal
  with
    client: Party
    worker: Party
    jobCategory: Skillset
    jobTitle: Text
    jobDescription: Text
    note : Text
    rateType : RateType
    totalAmount: Decimal
    status : Text
  where
    signatory client
    observer worker

    choice AcceptProposal : ContractId WorkContract
        controller worker
        do
            create WorkContract with
                contractClient = client
                contractWorker = worker
                contractJobCategory = jobCategory
                contractJobTitle = jobTitle
                contractJobDescription = jobDescription
                contractRateType = rateType
                contractTotalAmount = totalAmount
                contractStatus = "Active Contract - Awaiting Work Completion"

    choice RejectProposal : ContractId WorkProposal
        with
            feedback : Text
        controller worker
        do
            create this with 
              note = feedback
              status = "Rejected"

    choice ReviseProposal : ContractId WorkProposal
        with
            revisedJobCategory : Skillset
            revisedJobTitle : Text
            revisedJobDescription : Text
            feedbackText : Text
            adjustedRateType : RateType
            adjustedTotalAmount : Decimal
        controller client
        do
          debug "Revising Proposal!"
          create this with
              jobCategory = revisedJobCategory
              jobTitle = revisedJobTitle
              jobDescription = revisedJobDescription
              note = feedbackText
              rateType = adjustedRateType
              totalAmount = adjustedTotalAmount
              status = "Revised - Awaiting Review"
                
    nonconsuming choice CancelProposal : ()
        controller client
        do
          debug "attempting to cancel proposal on back end"
          archive self
          pure ()
       

template WorkContract
  with
    contractClient : Party
    contractWorker : Party
    contractJobCategory : Skillset
    contractJobTitle: Text
    contractJobDescription : Text
    contractRateType : RateType
    contractTotalAmount : Decimal
    contractStatus: Text
  where
    signatory contractClient, contractWorker
    
    choice CompleteJob : ContractId WorkContract
      controller contractWorker
      do
        create this with
          contractStatus = "Work Completed, Awaiting Payment"

    nonconsuming choice MakeContractPayment : ContractId WorkContract
      with
        authorizedParty: Party -- The party authorized to make the payment
        clientWalletCid: ContractId UserWallet -- The client's wallet contract ID
      controller contractClient
      do
        -- Ensure the authorized party is in the authorizedParties list
        assertMsg "The party is not authorized" (authorizedParty == contractClient)

        -- Create a Payment contract
        paymentCid <- create Payment with
            client = contractClient
            worker = contractWorker
            amount = contractTotalAmount
            clientWalletCid = clientWalletCid

        -- Execute the payment by exercising the MakePayment choice
        exercise paymentCid MakePayment

        -- Update the contract status
        archive self  
        create this with contractStatus = "Paid"
