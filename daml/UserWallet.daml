module UserWallet where

template UserWallet with
    username: Party
    walletBalance: Decimal
    observers: [Party]
    authorizedParties: [Party]
  where
    signatory username
    observer observers
    key username: Party
    maintainer key

    choice DepositFunds : ContractId UserWallet
        with
            depositAmount: Decimal
        controller username
        do
            assertMsg "Amount must be positive" (depositAmount > 0.0)
            create this with walletBalance = walletBalance + depositAmount

    choice DeductFunds : ContractId UserWallet
        with
            deductionAmount: Decimal
        controller username
        do
            assertMsg "Insufficient funds" (walletBalance >= deductionAmount)
            create this with walletBalance = walletBalance - deductionAmount

    choice AddFunds : ContractId UserWallet
        with
            additionAmount: Decimal
        controller username
        do
            create this with walletBalance = walletBalance + additionAmount

    choice AuthorizeParty : ContractId UserWallet
      with
        partyToAuthorize: Party
      controller username
      do
        create this with authorizedParties = partyToAuthorize :: authorizedParties
        
    -- New choice to add an observer
    choice AddObserver : ContractId UserWallet
      with
        newObserver: Party
      controller username
      do
        assertMsg "Observer already exists" (newObserver `notElem` observers)
        create this with observers = newObserver :: observers


    nonconsuming choice GetWallet : ContractId UserWallet
        controller username
        do
            return self  -- This returns the current wallet contract ID
            