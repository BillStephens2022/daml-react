module UserWallet where

template UserWallet with
    username: Party
    walletBalance: Decimal
    observers: [Party]
    authorizedParties: [Party]
  where
    signatory username
    observer observers

    key username: Party
    maintainer key

    choice AddObserver : ContractId UserWallet
      with
        newObserver: Party
      controller username
      do
        create this with observers = newObserver :: observers
    
    choice AuthorizeParty : ContractId UserWallet
      with
        partyToAuthorize: Party
      controller username
      do
        create this with authorizedParties = partyToAuthorize :: authorizedParties

    choice DepositFunds : ContractId UserWallet
        with
            depositAmount: Decimal
        controller username
        do
            create this with walletBalance = walletBalance + depositAmount

    choice DeductFunds : ContractId UserWallet
        with
            deductionAmount: Decimal
            authorizedParty: Party
        controller authorizedParty
        do
            assertMsg "The party is not authorized" $ authorizedParty `elem` authorizedParties
            create this with walletBalance = walletBalance - deductionAmount

    choice AddFunds : ContractId UserWallet
        with
            additionAmount: Decimal
            authorizedParty: Party
        controller authorizedParty
        do
            assertMsg "The party is not authorized" $ authorizedParty `elem` authorizedParties
            create this with walletBalance = walletBalance + additionAmount
            
    choice TransferFunds : ContractId UserWallet
        with
            toWalletCid: ContractId UserWallet
            amount: Decimal
            authorizedParty: Party
        controller authorizedParty
        do
            assertMsg "The party is not authorized" $ authorizedParty `elem` authorizedParties
            assertMsg "Insufficient funds" (walletBalance >= amount)

             -- Deduct from the sender's wallet
            create this with walletBalance = walletBalance - amount

            -- Fetch the recipient's wallet
            toWallet <- fetch toWalletCid
            -- Add to the recipient's wallet
            toWallet' <- exercise toWalletCid AddFunds with additionAmount = amount, authorizedParty = authorizedParty
        
            pure toWallet'